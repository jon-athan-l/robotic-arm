// Generated by gencpp from file detect/EntityInformation.msg
// DO NOT EDIT!


#ifndef DETECT_MESSAGE_ENTITYINFORMATION_H
#define DETECT_MESSAGE_ENTITYINFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detect
{
template <class ContainerAllocator>
struct EntityInformation_
{
  typedef EntityInformation_<ContainerAllocator> Type;

  EntityInformation_()
    : centerPoint()
    , generalizedEntityPoint()  {
      centerPoint.assign(0);

      generalizedEntityPoint.assign(0);
  }
  EntityInformation_(const ContainerAllocator& _alloc)
    : centerPoint()
    , generalizedEntityPoint()  {
  (void)_alloc;
      centerPoint.assign(0);

      generalizedEntityPoint.assign(0);
  }



   typedef boost::array<int16_t, 2>  _centerPoint_type;
  _centerPoint_type centerPoint;

   typedef boost::array<int16_t, 2>  _generalizedEntityPoint_type;
  _generalizedEntityPoint_type generalizedEntityPoint;





  typedef boost::shared_ptr< ::detect::EntityInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detect::EntityInformation_<ContainerAllocator> const> ConstPtr;

}; // struct EntityInformation_

typedef ::detect::EntityInformation_<std::allocator<void> > EntityInformation;

typedef boost::shared_ptr< ::detect::EntityInformation > EntityInformationPtr;
typedef boost::shared_ptr< ::detect::EntityInformation const> EntityInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detect::EntityInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detect::EntityInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::detect::EntityInformation_<ContainerAllocator1> & lhs, const ::detect::EntityInformation_<ContainerAllocator2> & rhs)
{
  return lhs.centerPoint == rhs.centerPoint &&
    lhs.generalizedEntityPoint == rhs.generalizedEntityPoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::detect::EntityInformation_<ContainerAllocator1> & lhs, const ::detect::EntityInformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::detect::EntityInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect::EntityInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect::EntityInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect::EntityInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect::EntityInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect::EntityInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detect::EntityInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d47ff85ed47785b133aaf336fe6729d";
  }

  static const char* value(const ::detect::EntityInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d47ff85ed47785bULL;
  static const uint64_t static_value2 = 0x133aaf336fe6729dULL;
};

template<class ContainerAllocator>
struct DataType< ::detect::EntityInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detect/EntityInformation";
  }

  static const char* value(const ::detect::EntityInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detect::EntityInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[2] centerPoint\n"
"int16[2] generalizedEntityPoint\n"
"\n"
;
  }

  static const char* value(const ::detect::EntityInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detect::EntityInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centerPoint);
      stream.next(m.generalizedEntityPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EntityInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detect::EntityInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detect::EntityInformation_<ContainerAllocator>& v)
  {
    s << indent << "centerPoint[]" << std::endl;
    for (size_t i = 0; i < v.centerPoint.size(); ++i)
    {
      s << indent << "  centerPoint[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.centerPoint[i]);
    }
    s << indent << "generalizedEntityPoint[]" << std::endl;
    for (size_t i = 0; i < v.generalizedEntityPoint.size(); ++i)
    {
      s << indent << "  generalizedEntityPoint[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.generalizedEntityPoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECT_MESSAGE_ENTITYINFORMATION_H
